var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
/**
 * Fees as at 1 July 2023.
 * For more information, visit https://www.pbs.gov.au/info/healthpro/explanatory-notes/front/fee
 */
define("fees", ["require", "exports", "decimal.js"], function (require, exports, decimal_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SafetyNetCardIssueFee = exports.SafetyNetThresholds = exports.PatientCoPaymentAmounts = exports.EfficientFundingOfChemotherapy = exports.AdditionalFeesForSafetyNetPrices = exports.getAHIFee = exports.getWholesaleMarkup = exports.DispensingFees = void 0;
    exports.DispensingFees = {
        ReadyPrepared: 8.37,
        DangerousDrugFee: 5.18,
        ExtemporaneouslyPrepared: 10.41,
        AllowableAdditionalPatientCharge: 3.29,
    };
    function getWholesaleMarkup(aemp) {
        if (aemp <= 5.5) {
            return 0.41;
        }
        else if (aemp > 5.5 && aemp <= 720) {
            return +new decimal_js_1.Decimal(aemp * 0.0752).toFixed(2);
        }
        else {
            return 54.14;
        }
    }
    exports.getWholesaleMarkup = getWholesaleMarkup;
    function getAHIFee(priceToPharmacistsForMaxQuantity) {
        const tier1Fee = 4.62;
        if (priceToPharmacistsForMaxQuantity < 100) {
            return tier1Fee;
        }
        else if (priceToPharmacistsForMaxQuantity >= 100 &&
            priceToPharmacistsForMaxQuantity <= 2000) {
            return +new decimal_js_1.Decimal(tier1Fee + (priceToPharmacistsForMaxQuantity - 100) * 0.05).toFixed(2);
        }
        else {
            return tier1Fee + 95;
        }
    }
    exports.getAHIFee = getAHIFee;
    exports.AdditionalFeesForSafetyNetPrices = {
        ReadyPrepared: 1.4,
        ExtemporaneouslyPrepared: 1.8,
    };
    exports.EfficientFundingOfChemotherapy = {
        PreparationFee: 88.62,
        DistributionFee: 29.15,
        DiluentFee: 5.77,
    };
    exports.PatientCoPaymentAmounts = {
        General: 30,
        Concessional: 7.3,
    };
    exports.SafetyNetThresholds = {
        General: 1563.5,
        Concessional: 262.8,
    };
    exports.SafetyNetCardIssueFee = 11.42;
});
define("calculator", ["require", "exports", "decimal.js", "fees"], function (require, exports, decimal_js_2, fees_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPBSPrice = exports.calculateDPMQ = exports.getPackSizeQuantityFactor = exports.getPriceToPharmacy = void 0;
    decimal_js_2 = __importDefault(decimal_js_2);
    function getPriceToPharmacy(aemp) {
        return aemp + (0, fees_1.getWholesaleMarkup)(aemp);
    }
    exports.getPriceToPharmacy = getPriceToPharmacy;
    function getPackSizeQuantityFactor(packSize, maxQuantity) {
        if (packSize > maxQuantity) {
            throw new Error("PACK_SIZE_LARGER_THAN_MAX_QUANTITY");
        }
        return maxQuantity / packSize;
    }
    exports.getPackSizeQuantityFactor = getPackSizeQuantityFactor;
    function calculateDPMQ({ aemp, maxQuantity, packSize, isDangerousDrug, isExtemporaneouslyPrepared, brandPremium, }) {
        let cost = 0;
        if (isExtemporaneouslyPrepared) {
            cost += fees_1.DispensingFees.ExtemporaneouslyPrepared;
        }
        else {
            cost += fees_1.DispensingFees.ReadyPrepared;
        }
        const qtyFactor = getPackSizeQuantityFactor(packSize, maxQuantity);
        let priceToPharmacy = +new decimal_js_2.default(getPriceToPharmacy(aemp) * qtyFactor).toFixed(2);
        if (brandPremium) {
            priceToPharmacy += brandPremium;
        }
        cost += priceToPharmacy;
        cost += (0, fees_1.getAHIFee)(priceToPharmacy) / qtyFactor;
        if (isDangerousDrug) {
            cost += fees_1.DispensingFees.DangerousDrugFee;
        }
        return +new decimal_js_2.default(cost).toFixed(2);
    }
    exports.calculateDPMQ = calculateDPMQ;
    function getPBSPrice({ dpmq, isConcessional, isSafetyNet, includeAllowableDiscount, }) {
        if (isConcessional && isSafetyNet) {
            return 0;
        }
        let output = fees_1.PatientCoPaymentAmounts.General;
        if (dpmq <= fees_1.PatientCoPaymentAmounts.General ||
            isConcessional ||
            (!isConcessional && isSafetyNet)) {
            output = fees_1.PatientCoPaymentAmounts.Concessional;
        }
        if (includeAllowableDiscount) {
            output = output - 1;
        }
        return output;
    }
    exports.getPBSPrice = getPBSPrice;
});
define("index", ["require", "exports", "fees", "calculator"], function (require, exports, Fees, Calculator) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Calculator = exports.Fees = void 0;
    exports.Fees = __importStar(Fees);
    exports.Calculator = __importStar(Calculator);
});
